class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        output = []
        if len(digits)==0:
            return output
        phone = {'2':['a','b','c'],'3':['d','e','f'],'4':['g','h','i'],'5':['j','k','l'],'6':['m','n','o'],'7':['p','q','r','s'],'8':['t','u','v'],'9':['w','x','y','z']}
        def backtrack(cur,lenth):
            if lenth==0:
                cur1 = ''.join(cur)
                output.append(cur1)
                return
            for i in phone[digits[len(digits)-lenth]]:
                cur.append(i)
                backtrack(cur,lenth-1)
                cur.pop()
        backtrack([],len(digits))
        return output
