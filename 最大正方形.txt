class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if matrix==[] or matrix==[[]]:return 0
        m = len(matrix)
        n = len(matrix[0])
        res = 0
        def issquare(startpoint,bian):
            for x in range(startpoint[1],startpoint[1]+bian-1):
                if matrix[startpoint[0]+bian-1][x]=='0':
                    return False
            for x in range(startpoint[0],startpoint[0]+bian-1):
                if matrix[x][startpoint[1]+bian-1]=='0':
                    return False
            return True
        for i in range(m):
            for j in range(n):
                if int(matrix[i][j])>0:
                    if i-1>=0 and j-1>=0:
                        b = int(matrix[i-1][j-1])
                        while b>0:
                            flag = issquare([i-b,j-b],b+1)
                            if flag:
                                matrix[i][j] = str(b+1)
                                break
                            b-=1
                        res = max(res,int(matrix[i][j]))
                    else:
                        res = max(res,int(matrix[i][j]))
        return res**2 

class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if matrix==[] or matrix==[[]]:return 0
        m = len(matrix)
        n = len(matrix[0])
        dp = [[0]*n for _ in range(m)]
        res = 0
        for i in range(m):
            for j in range(n):
                if i==0 or j==0:
                    dp[i][j] = int(matrix[i][j])
                else:
                    if matrix[i][j]=='1':
                        dp[i][j] = 1+min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])
                res = max(res,dp[i][j])
        return res**2